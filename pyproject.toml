[tool.poetry]
name = "academia-jedi"
version = "0.103.0a24"
description = ""
authors = ["Britodfbr <britodfbr@gmail.com>"]
packages = [
  {include='incolume', from=''}
]

[tool.poetry.dependencies]
python = ">=3.8.1,<3.12"
icecream = "^2.1.3"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocstrings = "*"
mkdocstrings-python = "*"
mkdocs-material = "*"
mkdocs-static-i18n = "*"

[tool.poetry.group.linters.dependencies]
isort = "^5.12.0"
pytest = "^7.1.2"
pytest-cov = "^4.0.0"
pydocstyle = "^6.3.0"
pylint = "^3.0.0"
ruff = "^0.3.3"
incolume-py-changelog = ">=0.8.0"

[tool.poetry.group.dev.dependencies]
SQLAlchemy = "^1.4.39"
aiohttp = "^3.8.3"
aspose-words = "^23.12.0"
blue = ">=0.9.1"
bs4 = "^0.0.1"
click = "^8.1.3"
deprecated = "^1.2.13"
dynaconf = "^3.2.3"
easygui = "^0.98.3"
faker = "^19.6.2"
fastapi = "^0.110.1"
fastparquet = "^2022.12.0"
flask-restful = "^0.3.9"
flet = "^0.21.2"
fpdf2 = "^2.7.8"
getch = "^1.0"
googletrans = "^3.0.0"
gspread = "^5.12.0"
html5lib = "^1.1"
httpx = "^0.13.3"
icecream = "^2.1.3"
jupyter = "^1.0.0"
language-tool-python = "^2.7.1"
lxml = "^4.9.1"
markdown = "^3.4.1"
mypy = "^1.5.1"
mypy-extensions = "^1.0.0"
nltk = "^3.8.1"
numpy = "^1.24.0"
oauth2client = "^4.1.3"
openai = "^0.26.5"
opencv-python = "^4.7.0.68"
openpyxl = "^3.0.10"
pandas = "^1.4.3"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
pdf2image = "^1.16.2"
pdfminer3 = "^2018.12.3.0"
pdfplumber = "^0.7.6"
pillow = "^9.4.0"
pony = "^0.7.16"
pwinput = "^1.0.2"
pyarrow = "^10.0.1"
pydantic = "^1.10.2"
pymupdf = "^1.21.1"
pypdf2 = "^3.0.1"
pysimplegui = "^4.60.4"
#pysimpleguiqt = "^0.35.0"
pyspellchecker = "^0.7.1"
pytesseract = "^0.3.10"
python-docx = "^0.8.11"
python-dotenv = "^0.20.0"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.9"
requests = "^2.28.1"
rstr = "*"
scikit-learn = "^1.2.1"
selectolax = "^0.3.11"
taskipy = "^1.10.3"
textblob = "^0.17.1"
transformers = "^4.26.1"
unidecode = "^1.3.6"
uvicorn = {extras = ["standard"], version = "^0.29.0"}
wget = "^3.2"
xlsxwriter = "^3.1.9"
xmltodict = "^0.13.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
log_format = '%(asctime)s; %(levelname)-8s; %(name)s; %(module)s; %(funcName)s; %(message)s'
log_date_format ='%FT%T%N%z'
addopts = "--doctest-modules --cov=incolume -sx --cov-report term-missing --cov-report html:coverage_report/html --cov-report xml:coverage_report/cov.xml"
testpaths = [
  "tests/",
  "incolume/academia_jedi/*/test_*",
]
python_files = [
  "test_*.py",
  "tests.py",
  "*_test.py",
]
python_classes = ["Test", "Check"]
python_functions = ["test_*"]
env = [
    "INCOLUME_MODE=testing",
]

markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "webtest: marks tests as webtest (deselect with '-m \"not webtest\"')",
  "fast: marks tests as fast (deselect with '-m \"not fast\"')",
]


[tool.coverage.html]
directory = "coverage_report/html"


[tool.coverage.xml]


[tool.coverage.run]
omit = [
  # omit anything in a .local directory anywhere
  "*/.local/*",
  # omit everything in /usr
  "/usr/*",
  # omit this single file
  "configure/truncus.py",
]


[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "logger.debug",
  "logger.info",
  "logger.warning",
  "logger.error",
  "ImportError",
  "ModuleNotFoundError",
  "__package__ =",
  "def run",
  "def terminal.",
  "__author__",
  "class IElements"
]

[tool.isort]
profile = "black"
known_first_party = "poetry"
skip = [".gitignore", ".dockerignore"]
skip_glob = ["example/*"]
extend_skip = [".md", ".json"]
extend_skip_glob = ["my_*_module.py"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79

[tool.black]
line-length = 79
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
 /(
  ^/foo.py    # exclude a file named foo.py in the root of the project
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
  | docs
  # The following are specific to Black, you probably don't want those.
  | blib2to3
  | tests/data
  | profiling
 )/
 '''

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

[tool.pylint.basic]
# Allow shorter and longer variable names than the default.
argument-rgx = "[a-z_][a-z0-9_]*$"
attr-rgx = "[a-z_][a-z0-9_]*$"
variable-rgx = "[a-z_][a-z0-9_]*$"

# Ensure that orjson is analysed as a C extension by pylint.
extension-pkg-whitelist = "orjson"


[tool.pylint.messages_control]
disable = [
    # Disable too many and too few checks.
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-function-args",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-few-public-methods",

    # Similar lines in files (often the case in tests).
    "duplicate-code",

    # Many functions (e.g. callbacks) will naturally have unused arguments.
    "unused-argument",

    # # Disable checking that method could be a function in classes (often used for organisation).
    # "no-self-use",

    # Disable failure for TODO items in the codebase (code will always have TODOs).
    "fixme",

    # Disable docstrings checks as we don't require excessive documentation.
    "missing-docstring",

    "no-member",
    "unspecified-encoding",
]

[flake8]
max-line-length = 79

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
#ignore_missing_imports = true
#ignore_errors = false
#warn_return_any = true
#warn_unused_configs = true

[[tool.mypy.overrides]]
module = "pyautogui.*"
disable_error_code = "attr-defined"
disallow_untyped_defs = true

[pycodestyle]
max_line_length = 79
ignore = ['E203']

[tool.ruff]
# required-version = "0.1.6"

# Assume Python Version
target-version = "py310"

# Decrease the maximum line length to 79 character.
line-length = 79

namespace-packages = ["incolume/py/planalto_legis"]

# Allow imports relative to directories
src = ["incolume/", "tests/", "examples/"]

fix = false
force-exclude = true

# Enumerate all fixed violations.
show-fixes = true

# By default, always show source code snippets.
#show-source = true

# warning: The `show-source` option has been deprecated in favor
# of `output-format`'s "full" and "concise" variants.
# Please update your configuration
# to use `output-format = <full|concise>` instead.
#output-format = "concise"
# Group violations by containing file.
# can be: "text" | "json" | "junit" | "github" | "gitlab" | "pylint" | "azure" "grouped"|full|concise
output-format = "full"


# Enable preview features.
preview = true

[tool.ruff.format]
indent-style = "space"
quote-style="single"

[tool.ruff.lint]
task-tags = ["TODO", "FIXME"]

# Require explicit selection of preview rules.
explicit-preview-rules = true

# Allow applying all unsafe fixes in the `E` rules and `F401` without the `--unsafe-fixes` flag
extend-safe-fixes = ["E", "F401"]

# Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

# Enable fix for flake8-bugbear (`B`), on top of any rules specified by `fixable`.
extend-fixable = ["B"]

select = [
  "A",    #flake8-builtins
  "AIR",    #Airflow
  "ANN",    #flake8-annotations
  "ARG",    #flake8-unused-arguments
  "ASYNC",    #flake8-async
  "B",    #flake8-bugbear
  "BLE",    #flake8-blind-except
  "C4",    #flake8-comprehensions
  "C90",    #mccabe
  "COM",    #flake8-commas
  "CPY",    #flake8-copyright
  "D",   # pydocstyle
  "DJ",    #flake8-django
  "DTZ",    #flake8-datetimez
  "E",   # pycodestyle
  "W",    #pycodestyle
  "EM",    #flake8-errmsg
  "ERA",    #eradicate
  "EXE",    #flake8-executable
  "F",   # pyflakes
  "FA",    #flake8-future-annotations
  "FBT",    #flake8-boolean-trap
  "FIX",    #flake8-fixme
  "FLY",    #flynt
  "FURB",    #refurb
  "G",    #flake8-logging-format
  "I",    #isort
  "ICN",    #flake8-import-conventions
  "INP",    #flake8-no-pep420
  "INT",    #flake8-gettext
  "ISC",    #flake8-implicit-str-concat
  "N",    #pep8-naming
  "NPY",    #NumPy-specific rules
  "PD",    #pandas-vet
  "PERF",    #Perflint
  "PGH",    #pygrep-hooks
  "PIE",    #flake8-pie
  "PL",    #Pylint
  "PT",    #flake8-pytest-style
  "PTH",    #flake8-use-pathlib
  "PYI",    #flake8-pyi
  "Q",    #flake8-quotes
  "RET",    #flake8-return
  "RSE",    #flake8-raise
  "RUF",    #Ruff-specific rules
  "S",    #flake8-bandit
  "SIM",    #flake8-simplify
  "SLF",    #flake8-self
  "SLOT",    #flake8-slots
  "T10",    #flake8-debugger
  "T20",    #flake8-print
  "TCH",    #flake8-type-checking
  "TD",    #flake8-todos
  "TID",    #flake8-tidy-imports
  "TRY",    #tryceratops
  "UP",  # pyupgrade
  "YTT",    #flake8-2020
]

# Never enforce `E501` (line length violations).
ignore = [
  "INP001",
  "CPY001",
  "FA100",  # Conflit with mypy
  "UP006",  # Conflit with mypy
  "UP007",  # Conflit with mypy
  "I001",   # conflit with isort
  "ISC001",  # single-line-implicit-string-concatenation
  #  "COM812",  # missing-trailing-comma
]

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
#"__init__.py" = ["E402"]
#"path/to/file.py" = ["E402"]
"**/{tutorial}/*" = ["N999"]
"**/{tests,docs,tools,utils}/*" = ["EXE002"]
"**/{*_tests,test_*,*_test}.py" = [
  "ANN001",
  "ANN101",
  "EXE002",
  "I001",
  "PLR6301",
  "S101",
  "ANN401",  # suppress due conflit with mypy
]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 5

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-dummy-args = true
mypy-init-return = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-copyright]
author = "Ruff"
# Avoid enforcing a header on files smaller than 1024 bytes.
min-file-size = 2

[tool.ruff.lint.flake8-quotes]
# Don't bother trying to avoid escapes.
avoid-escape = false
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.flake8-pytest-style]
parametrize-names-type = "list"
parametrize-values-row-type = "tuple"

[tool.ruff.lint.pylint]
max-args = 5


[tool.taskipy.variables]
path = "incolume/ tests/"
ruff_path_valid = "incolume/academia_jedi/ajedi20231002* incolume/academia_jedi/ajedi20231022* incolume/academia_jedi/ajedi20231026*"
CHANGELOGFILE = "CHANGELOG.md"
URLCOMPARE = "https://github.com/incolume-jedi/academia-jedi/compare"

[tool.taskipy.tasks]
#bandit={help='', cmd='poetry run bandit -c pyproject.toml -r {path}', use_vars=true}
#pre_check-all = {cmd='echo Starting Check all ..', help=''}
#check-all = {cmd='poetry run task clean-all; poetry run task lint; poetry run task sec',  help = "Checking all" }
#post_check-all = {cmd='echo Checking finished!', help=''}
clean = {cmd = "echo -n 'Starting cleanning environment..'; find ./ \\( -wholename '*report_coverage' -o -name '*.pyc' -o -name '*~' -o -name '*.log' -o -name '*.log.*' -o -name '.cache' -o -name '.coverage' \\) -delete ; echo ' ok' ",  help = "Shallow clean into environment (.pyc, .cache, .egg, .log, et all)" }
pre_clean-all = {cmd='poetry run task clean', help=''}
clean-all = {cmd = "echo -n 'Starting Deep cleanning ..'; find ./ \\( -name '*_cache' -o -name '*cache__' -o -name dist -o -name build -o -name .tox -o -name site -o -name coverage_report -o -name '.ipynb_checkpoints' \\) -exec rm -rf {} 2> /dev/null \\; ; echo ' Deep cleaning finished!' ",  help = "Deep cleanning into environment (dist, build, htmlcov, .tox, *_cache, et all)" }
#pre_docs-build={help='Pre docs-build', cmd="poetry run task changelog"}
#docs-build = {help="Generate documentation", cmd="poetry run mkdocs gh-deploy --config-file mkdocs.yml --remote-branch webdoc"}
#docs-serve = {help="Run server documentation", cmd="poetry run mkdocs serve"}
pre_lint="task lint_blue && task lint_isort && task lint_flake8 && task lint_pydocstyle"
#pre_lint="task lint_blue && task lint_isort && task lint_flake8 && task lint_pydocstyle && task lint_mypy"
#pre_lint="task lint_blue && task lint_isort && task lint_flake8 && task lint_pydocstyle && task lint_pylint && task lint_mypy"
lint={help='Checking all linters approved', cmd=''}
pre_lint_all='task lint && task lint_ruff'
lint_all={help='Checking all linters configurated', cmd=''}
lint_black={help='Checking with black', cmd='echo --black--; poetry run black --check --diff {path}', use_vars=true}
lint_blue={help='Checking with blue', cmd='echo --blue--; poetry run blue --check --diff {path}', use_vars=true}
lint_flake8={help='Checking with flake8', cmd='echo --flake8--; poetry run flake8 --config pyproject.toml {path}', use_vars=true}
lint_isort={help='Checking with isort', cmd='echo --isort--; poetry run isort --profile black --check --atomic --py all -m 3 {path}', use_vars=true}
lint_mypy={help='Checking with mypy', cmd='echo --mypy--; poetry run mypy --check {path}', use_vars=true}
lint_pydocstyle={help='Checking with pydocstyle', cmd='echo --pydocstyle--; poetry run pydocstyle {path}', use_vars=true}
lint_pylint={help='Checking with pylint', cmd='echo --pylint--; poetry run pylint {path}', use_vars=true}
lint_ruff={help='', cmd='echo --ruff--; poetry run ruff check --preview {ruff_path_valid} #{path}', use_vars=true}
pre_patch={help='Run linters tools', cmd="poetry run task lint"}
patch={cmd='v=$(poetry version patch) && poetry run pytest && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='Generate a patch Sematic Version'}
post_patch={help='Run securety tools', cmd="poetry run task bandit && poetry run task safety"}
premajor={cmd='v=$(poetry version premajor) && poetry run pytest && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version premajor'}
preminor={cmd='v=$(poetry version preminor) && poetry run pytest && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version preminor'}
prerelease={cmd='v=$(poetry version prerelease) && poetry run pytest && git ci -m "$v" pyproject.toml $(find incolume* -name version.txt)', help='poetry version prerelease'}
safety={help='Check safety of packages into project.', cmd='poetry run safety check'}
pre_sec={help='Securance validations', cmd='poetry run task bandit && poetry run task safety'}
sec={help="Checking environment's safety", cmd=''}
pre_changelog='poetry run pytest -m fast'
changelog = {help='Update changelog file', cmd = "poetry run gcl {CHANGELOGFILE} -u {URLCOMPARE} && echo CHANGELOG file - {CHANGELOGFILE} - updated with success.;echo", use_vars = true }
gcl = {help='Update changelog file', cmd='poetry run task changelog'}
setup = { help = 'Configure environment develop', cmd='git config core.hooksPath .git-hooks/'}
